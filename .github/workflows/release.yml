name: Release Desktop App

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      release_upload_url: ${{ steps.create-release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${{ steps.get_version.outputs.VERSION }}`,
              name: `ToolsLab Desktop v${{ steps.get_version.outputs.VERSION }}`,
              body: `## What's New

            ### Features
            - Professional developer tools suite
            - Works completely offline
            - Auto-updates enabled
            - Cross-platform support

            ### Downloads
            - **Windows**: ToolsLab_${{ steps.get_version.outputs.VERSION }}_x64-setup.exe
            - **macOS Intel**: ToolsLab_${{ steps.get_version.outputs.VERSION }}_x64.dmg
            - **macOS Apple Silicon**: ToolsLab_${{ steps.get_version.outputs.VERSION }}_aarch64.dmg
            - **Linux AppImage**: ToolsLab_${{ steps.get_version.outputs.VERSION }}_amd64.AppImage
            - **Linux Deb**: ToolsLab_${{ steps.get_version.outputs.VERSION }}_amd64.deb

            ### Installation
            1. Download the appropriate file for your system
            2. Install using your system's standard method
            3. Launch ToolsLab from your applications

            ---
            *ToolsLab respects your privacy - all tools work offline with no data collection*`,
              draft: true,
              prerelease: false
            })
            return {
              id: data.id,
              upload_url: data.upload_url
            }

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'aarch64'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            arch: 'x64'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
            arch: 'amd64'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Tauri CLI via NPM
        run: npm install -g @tauri-apps/cli@latest
        shell: bash

      - name: Verify Tauri installation
        run: |
          tauri --version
          which tauri
        shell: bash

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libgtk-3-dev \
            libjavascriptcoregtk-4.1-dev \
            libsoup-3.0-dev

      - name: Clean cache if needed
        run: |
          cargo clean || true
          rm -rf node_modules/.cache || true
        shell: bash
        continue-on-error: true

      - name: Install frontend dependencies
        run: npm ci

      - name: Debug package.json scripts
        run: |
          echo "=== Checking package.json scripts ==="
          cat package.json | jq '.scripts' || echo "No scripts found"
          echo "=== Checking Tauri CLI ==="
          which tauri || echo "Tauri not in PATH"
          tauri --version || echo "tauri command failed"
        shell: bash

      - name: Build frontend
        run: npm run build
        env:
          NEXT_PUBLIC_SITE_URL: https://toolslab.dev
          NEXT_PUBLIC_ENABLE_ADS: false

      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          TAURI_PUBLIC_KEY: ${{ secrets.TAURI_PUBLIC_KEY }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}
          tauriScript: tauri

      - name: Validate build artifacts
        run: |
          echo "=== Checking Tauri build output ==="
          ls -la src-tauri/target/release/bundle/ || echo "No bundle found"
          find src-tauri/target/release/bundle/ -name "*.dmg" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.deb" || echo "No artifacts found"
        shell: bash

  publish-release:
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]
    if: success()
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Wait for builds to complete
        run: sleep 30

      - name: Publish release
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              draft: false,
              prerelease: false
            })

      - name: Generate update manifest
        run: |
          CURRENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          cat > latest.json << EOF
          {
            "version": "v${{ needs.create-release.outputs.version }}",
            "notes": "New version available with improvements and bug fixes",
            "pub_date": "${CURRENT_DATE}",
            "platforms": {
              "darwin-x86_64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/v${{ needs.create-release.outputs.version }}/ToolsLab_${{ needs.create-release.outputs.version }}_x64.dmg"
              },
              "darwin-aarch64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/v${{ needs.create-release.outputs.version }}/ToolsLab_${{ needs.create-release.outputs.version }}_aarch64.dmg"
              },
              "linux-x86_64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/v${{ needs.create-release.outputs.version }}/ToolsLab_${{ needs.create-release.outputs.version }}_amd64.AppImage"
              },
              "windows-x86_64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/v${{ needs.create-release.outputs.version }}/ToolsLab_${{ needs.create-release.outputs.version }}_x64-setup.exe"
              }
            }
          }
          EOF

      - name: Upload update manifest
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const manifestContent = fs.readFileSync('./latest.json');

            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }}
            });

            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              name: 'latest.json',
              data: manifestContent,
              headers: {
                'content-type': 'application/json',
                'content-length': manifestContent.length
              }
            });
