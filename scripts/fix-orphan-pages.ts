#!/usr/bin/env tsx
/**
 * Fix Orphan Pages Script
 *
 * Automatically generates optimized related tools suggestions
 * for all tools using the RelatedToolsEngine
 *
 * This script generates a new tool-instructions.ts file with
 * balanced internal linking that eliminates orphan pages
 *
 * Usage: npm run fix:orphan-pages
 */

import { tools } from '../lib/tools';
import {
  getSmartRelatedTools,
  getRelatedToolsEngine,
} from '../lib/seo/related-tools-engine';
import * as fs from 'fs';
import * as path from 'path';

interface ToolSuggestion {
  toolId: string;
  toolName: string;
  relatedTools: string[];
  linkCount: number;
}

const suggestions: ToolSuggestion[] = [];

/**
 * Generate suggestions for all tools
 */
function generateSuggestions() {
  console.log('🔍 Generating smart related tools suggestions...\n');

  const engine = getRelatedToolsEngine();

  tools.forEach((tool) => {
    const relatedTools = getSmartRelatedTools(tool.id, 4);
    const linkCount = engine.getLinkCount(tool.id);

    suggestions.push({
      toolId: tool.id,
      toolName: tool.name,
      relatedTools,
      linkCount,
    });
  });

  // Sort by link count (orphans first)
  suggestions.sort((a, b) => a.linkCount - b.linkCount);
}

/**
 * Display preview of changes
 */
function displayPreview() {
  console.log('📋 PREVIEW OF CHANGES:\n');

  console.log('🔴 ORPHAN PAGES (will receive most improvement):');
  const orphans = suggestions.filter((s) => s.linkCount < 3);
  orphans.forEach((s) => {
    console.log(`\n   ${s.toolName} (currently ${s.linkCount} links)`);
    console.log(`   Suggested related tools:`);
    s.relatedTools.forEach((id) => {
      const tool = tools.find((t) => t.id === id);
      console.log(`      • ${tool?.name || id}`);
    });
  });

  console.log('\n\n⚠️  UNDER-LINKED PAGES (will receive improvement):');
  const underlinked = suggestions.filter(
    (s) => s.linkCount >= 3 && s.linkCount <= 5
  );
  underlinked.forEach((s) => {
    console.log(
      `   ${s.toolName} (${s.linkCount} links) → ${s.relatedTools.length} suggested`
    );
  });

  console.log('\n\n✅ WELL-LINKED PAGES (maintained):');
  const wellLinked = suggestions.filter(
    (s) => s.linkCount >= 6 && s.linkCount <= 10
  );
  console.log(`   ${wellLinked.length} tools already well-linked\n`);
}

/**
 * Generate TypeScript code for tool-instructions.ts
 */
function generateCode(): string {
  const lines: string[] = [];

  lines.push('/**');
  lines.push(' * Tool Instructions and Related Tools');
  lines.push(' *');
  lines.push(
    ' * IMPORTANT: This file is auto-generated by scripts/fix-orphan-pages.ts'
  );
  lines.push(
    ' * DO NOT edit manually - run `npm run fix:orphan-pages` to regenerate'
  );
  lines.push(' *');
  lines.push(' * Generated: ' + new Date().toISOString());
  lines.push(' */');
  lines.push('');
  lines.push("import { ToolInstructions } from './types';");
  lines.push('');
  lines.push(
    'export const toolInstructions: Record<string, ToolInstructions> = {'
  );

  suggestions.forEach((suggestion, index) => {
    lines.push(`  '${suggestion.toolId}': {`);
    lines.push(`    title: 'How to use ${suggestion.toolName}',`);
    lines.push(`    steps: [],`);
    lines.push(`    features: [],`);
    lines.push(`    useCases: [],`);
    lines.push(`    proTips: [],`);
    lines.push(`    troubleshooting: [],`);
    lines.push(`    relatedTools: [`);

    suggestion.relatedTools.forEach((relatedId, idx) => {
      const comma = idx < suggestion.relatedTools.length - 1 ? ',' : '';
      lines.push(`      '${relatedId}'${comma}`);
    });

    lines.push(`    ],`);

    const comma = index < suggestions.length - 1 ? ',' : '';
    lines.push(`  }${comma}`);
  });

  lines.push('};');

  return lines.join('\n');
}

/**
 * Backup existing file
 */
function backupExistingFile(filePath: string) {
  if (fs.existsSync(filePath)) {
    const backupPath = filePath.replace('.ts', `.backup.${Date.now()}.ts`);
    fs.copyFileSync(filePath, backupPath);
    console.log(
      `\n✅ Backed up existing file to: ${path.basename(backupPath)}`
    );
  }
}

/**
 * Write generated code to file
 */
function writeToFile(confirm: boolean = false) {
  const filePath = path.join(
    process.cwd(),
    'lib',
    'tool-instructions-generated.ts'
  );

  if (!confirm) {
    console.log('\n📝 DRY RUN: Would write to:', filePath);
    console.log('\nTo apply changes, run:');
    console.log('   npm run fix:orphan-pages -- --apply\n');
    return;
  }

  const code = generateCode();

  // Backup existing file
  backupExistingFile(filePath);

  // Write new file
  fs.writeFileSync(filePath, code, 'utf-8');

  console.log(`\n✅ Generated: ${filePath}`);
  console.log('\n📋 NEXT STEPS:');
  console.log('   1. Review the generated file');
  console.log('   2. Move content to actual tool-instructions.ts');
  console.log('   3. Run: npm run validate:links');
  console.log('   4. Commit changes\n');
}

/**
 * Show statistics
 */
function showStatistics() {
  const engine = getRelatedToolsEngine();

  console.log('\n' + '='.repeat(80));
  console.log('📊 EXPECTED IMPACT');
  console.log('='.repeat(80) + '\n');

  const orphans = suggestions.filter((s) => s.linkCount < 3);
  const underlinked = suggestions.filter(
    (s) => s.linkCount >= 3 && s.linkCount <= 5
  );

  console.log('BEFORE:');
  console.log(`   Orphan pages: ${orphans.length}`);
  console.log(`   Under-linked: ${underlinked.length}`);

  console.log('\nAFTER (estimated):');
  console.log(`   Orphan pages: 0 (${orphans.length} fixed)`);
  console.log(
    `   Under-linked: ${Math.ceil(underlinked.length * 0.3)} (${Math.floor(underlinked.length * 0.7)} improved)`
  );

  console.log('\n💡 IMPROVEMENTS:');
  orphans.forEach((orphan) => {
    console.log(
      `   ${orphan.toolName}: ${orphan.linkCount} → ~${orphan.relatedTools.length + 2} links`
    );
  });

  console.log('\n' + '='.repeat(80) + '\n');
}

// Main execution
console.log('🚀 Starting Orphan Pages Fix...\n');

generateSuggestions();
displayPreview();
showStatistics();

// Check if --apply flag is present
const shouldApply = process.argv.includes('--apply');
writeToFile(shouldApply);

console.log('✅ Script completed successfully\n');
