const fs = require('fs');
const path = require('path');

// Template spagnolo generico
const spanishTemplate = {
  title: 'CÃ³mo usar {TOOL_NAME}',
  steps: [
    {
      title: 'Pega tu {INPUT_TYPE}',
      description:
        'Copia y pega tu {INPUT_TYPE} en el Ã¡rea de entrada. La herramienta acepta cualquier formato y lo procesarÃ¡ inmediatamente.',
    },
    {
      title: 'Configura las opciones (si disponible)',
      description:
        'Ajusta las opciones de formato, indentaciÃ³n u otras configuraciones para que coincidan con tus preferencias.',
    },
    {
      title: 'Examina la salida',
      description:
        'La herramienta {ACTION_VERB} tu entrada y mostrarÃ¡ el resultado con formato y validaciÃ³n apropiados.',
    },
    {
      title: 'Copia o descarga el resultado',
      description:
        'Copia el {OUTPUT_TYPE} al portapapeles para uso inmediato o descÃ¡rgalo como archivo.',
    },
  ],
  features: [
    'Procesamiento en tiempo real con resultados instantÃ¡neos',
    'Sin lÃ­mite de tamaÃ±o para procesamiento basado en navegador',
    'Completamente seguro - todo el procesamiento ocurre en tu navegador',
    'Sin carga de datos ni almacenamiento en servidor',
    'Copiar al portapapeles con un clic',
    'Descargar resultados como archivo',
    'ValidaciÃ³n de sintaxis y resaltado de errores',
    'Funciona sin conexiÃ³n despuÃ©s de la carga inicial',
  ],
  useCases: [
    'Limpiar y formatear cÃ³digo desordenado para mejor legibilidad',
    'Estandarizar el estilo de cÃ³digo en equipos de desarrollo',
    'Depurar estructuras complejas con indentaciÃ³n apropiada',
    'Preparar cÃ³digo para documentaciÃ³n y revisiones de cÃ³digo',
    'Convertir entre diferentes estÃ¡ndares de formato',
    'Validar sintaxis antes del despliegue',
    'Procesar datos de fuentes externas o APIs',
    'Generar cÃ³digo listo para producciÃ³n',
  ],
  proTips: [
    'Usa atajos de teclado para un flujo de trabajo mÃ¡s rÃ¡pido',
    'Procesa archivos grandes en fragmentos mÃ¡s pequeÃ±os si el rendimiento disminuye',
    'Valida tu entrada antes del procesamiento para detectar errores temprano',
    'Guarda las configuraciones frecuentes como predeterminadas',
    'Usa la funciÃ³n de descarga para archivar archivos procesados',
    'Verifica cuidadosamente la salida antes de usar en producciÃ³n',
  ],
  troubleshooting: [
    'Errores de sintaxis: verifica parÃ©ntesis, comillas o puntos y coma faltantes',
    'Fallo de procesamiento: asegÃºrate de que el formato de entrada sea vÃ¡lido',
    'Rendimiento lento: intenta procesar fragmentos de datos mÃ¡s pequeÃ±os',
    'Funciones faltantes: algunas sintaxis avanzadas pueden requerir formato manual',
    'Compatibilidad de navegador: usa Chrome, Firefox o Edge para mejores resultados',
  ],
  keyboardShortcuts: [
    { keys: 'Ctrl+V', description: 'Pegar entrada' },
    { keys: 'Ctrl+Enter', description: 'Procesar/Formatear' },
    { keys: 'Ctrl+C', description: 'Copiar resultado' },
    { keys: 'Ctrl+S', description: 'Descargar archivo' },
  ],
};

const actionVerbs = {
  formatter: 'formatearÃ¡ y embellecerÃ¡',
  minifier: 'minificarÃ¡ y optimizarÃ¡',
  validator: 'validarÃ¡',
  generator: 'generarÃ¡',
  converter: 'convertirÃ¡',
  encode: 'codificarÃ¡',
  decode: 'decodificarÃ¡',
  tester: 'probarÃ¡',
  default: 'procesarÃ¡',
};

const inputTypes = {
  json: 'datos JSON',
  sql: 'consulta SQL',
  xml: 'datos XML',
  yaml: 'datos YAML',
  css: 'cÃ³digo CSS',
  js: 'cÃ³digo JavaScript',
  html: 'cÃ³digo HTML',
  csv: 'datos CSV',
  base64: 'cadena Base64',
  url: 'URL o texto',
  jwt: 'token JWT',
  regex: 'expresiÃ³n regular',
  markdown: 'texto Markdown',
  default: 'contenido',
};

const outputTypes = {
  json: 'JSON formateado',
  sql: 'SQL formateado',
  xml: 'XML formateado',
  yaml: 'YAML formateado',
  css: 'CSS formateado',
  js: 'JavaScript formateado',
  default: 'resultado procesado',
};

function getActionVerb(toolId) {
  if (toolId.includes('formatter')) return actionVerbs.formatter;
  if (toolId.includes('minifier')) return actionVerbs.minifier;
  if (toolId.includes('validator')) return actionVerbs.validator;
  if (toolId.includes('generator')) return actionVerbs.generator;
  if (toolId.includes('converter')) return actionVerbs.converter;
  if (toolId.includes('encode')) return actionVerbs.encode;
  if (toolId.includes('decode')) return actionVerbs.decode;
  if (toolId.includes('tester')) return actionVerbs.tester;
  return actionVerbs.default;
}

function getInputType(toolId) {
  for (const [key, value] of Object.entries(inputTypes)) {
    if (toolId.includes(key) && key !== 'default') return value;
  }
  return inputTypes.default;
}

function getOutputType(toolId) {
  for (const [key, value] of Object.entries(outputTypes)) {
    if (toolId.includes(key) && key !== 'default') return value;
  }
  return outputTypes.default;
}

function generateInstructions(toolId, toolTitle) {
  const template = JSON.parse(JSON.stringify(spanishTemplate));

  template.title = template.title.replace('{TOOL_NAME}', toolTitle);

  const inputType = getInputType(toolId);
  const actionVerb = getActionVerb(toolId);
  const outputType = getOutputType(toolId);

  template.steps[0].title = template.steps[0].title.replace(
    '{INPUT_TYPE}',
    inputType
  );
  template.steps[0].description = template.steps[0].description.replace(
    '{INPUT_TYPE}',
    inputType
  );
  template.steps[2].description = template.steps[2].description.replace(
    '{ACTION_VERB}',
    actionVerb
  );
  template.steps[3].description = template.steps[3].description.replace(
    '{OUTPUT_TYPE}',
    outputType
  );

  return template;
}

// Processa solo i file con testo inglese, escludendo quelli giÃ  tradotti
const skipFiles = ['api-tester.json', 'sql-formatter.json'];
const toolsDir = './lib/i18n/dictionaries/es/tools';
const files = fs
  .readdirSync(toolsDir)
  .filter((f) => f.endsWith('.json') && !skipFiles.includes(f));

let updated = 0;

console.log('\nðŸ“¦ ES: Traduciendo archivos restantes\n');

files.forEach((file) => {
  const filePath = path.join(toolsDir, file);
  const toolId = file.replace('.json', '');
  const toolData = JSON.parse(fs.readFileSync(filePath, 'utf8'));

  const hasEnglishInstructions =
    toolData.instructions &&
    typeof toolData.instructions === 'object' &&
    toolData.instructions.title &&
    toolData.instructions.title.includes('How to use');

  if (hasEnglishInstructions) {
    toolData.instructions = generateInstructions(toolId, toolData.title);
    fs.writeFileSync(filePath, JSON.stringify(toolData, null, 2));
    console.log(`  âœ“ ${toolId}`);
    updated++;
  }
});

console.log(`\nâœ… ES: ${updated} archivos traducidos`);
