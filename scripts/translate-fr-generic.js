const fs = require('fs');
const path = require('path');

// Generic French instructions template
const frenchInstructionsTemplate = {
  title: 'Comment utiliser {TOOL_NAME}',
  steps: [
    {
      title: 'Collez votre {INPUT_TYPE}',
      description:
        "Copiez et collez votre {INPUT_TYPE} dans la zone de saisie. L'outil accepte tout format et le traitera immÃ©diatement.",
    },
    {
      title: 'Configurez les options (si disponible)',
      description:
        "Ajustez les options de formatage, l'indentation ou d'autres paramÃ¨tres pour correspondre Ã  vos prÃ©fÃ©rences.",
    },
    {
      title: 'Examinez la sortie',
      description:
        "L'outil va {ACTION_VERB} votre saisie et afficher le rÃ©sultat avec formatage et validation appropriÃ©s.",
    },
    {
      title: 'Copiez ou tÃ©lÃ©chargez le rÃ©sultat',
      description:
        'Copiez le {OUTPUT_TYPE} dans votre presse-papiers pour utilisation immÃ©diate ou tÃ©lÃ©chargez-le en tant que fichier.',
    },
  ],
  features: [
    'Traitement en temps rÃ©el avec rÃ©sultats instantanÃ©s',
    'Aucune limite de taille pour le traitement basÃ© sur navigateur',
    'ComplÃ¨tement sÃ©curisÃ© - tout le traitement se fait dans votre navigateur',
    'Aucun tÃ©lÃ©chargement de donnÃ©es ou stockage serveur',
    'Copier dans le presse-papiers en un clic',
    'TÃ©lÃ©charger les rÃ©sultats sous forme de fichier',
    'Validation de syntaxe et mise en Ã©vidence des erreurs',
    'Fonctionne hors ligne aprÃ¨s le chargement initial',
  ],
  useCases: [
    'Nettoyer et formater le code dÃ©sordonnÃ© pour une meilleure lisibilitÃ©',
    'Standardiser le style de code dans les Ã©quipes de dÃ©veloppement',
    'DÃ©boguer les structures complexes avec une indentation appropriÃ©e',
    'PrÃ©parer le code pour la documentation et les revues de code',
    'Convertir entre diffÃ©rents standards de formatage',
    'Valider la syntaxe avant le dÃ©ploiement',
    "Traiter les donnÃ©es provenant de sources externes ou d'API",
    'GÃ©nÃ©rer du code prÃªt pour la production',
  ],
  proTips: [
    'Utilisez les raccourcis clavier pour un flux de travail plus rapide',
    'Traitez les gros fichiers en petits morceaux si les performances ralentissent',
    'Validez votre saisie avant le traitement pour dÃ©tecter les erreurs tÃ´t',
    'Enregistrez les paramÃ¨tres frÃ©quemment utilisÃ©s par dÃ©faut',
    'Utilisez la fonction de tÃ©lÃ©chargement pour archiver les fichiers',
    'VÃ©rifiez attentivement la sortie avant utilisation en production',
  ],
  troubleshooting: [
    'Erreurs de syntaxe : vÃ©rifiez les crochets, guillemets ou points-virgules manquants',
    'Ã‰chec de traitement : assurez-vous que le format de saisie est valide',
    'Performance lente : essayez de traiter de plus petits morceaux de donnÃ©es',
    'FonctionnalitÃ©s manquantes : certaines syntaxes avancÃ©es peuvent nÃ©cessiter un formatage manuel',
    'CompatibilitÃ© navigateur : utilisez Chrome, Firefox ou Edge pour de meilleurs rÃ©sultats',
  ],
  keyboardShortcuts: [
    { keys: 'Ctrl+V', description: "Coller l'entrÃ©e" },
    { keys: 'Ctrl+Enter', description: 'Traiter/Formater' },
    { keys: 'Ctrl+C', description: 'Copier le rÃ©sultat' },
    { keys: 'Ctrl+S', description: 'TÃ©lÃ©charger le fichier' },
  ],
};

const actionVerbs = {
  formatter: 'formater et embellir',
  minifier: 'minifier et optimiser',
  validator: 'valider',
  generator: 'gÃ©nÃ©rer',
  converter: 'convertir',
  encode: 'encoder',
  decode: 'dÃ©coder',
  tester: 'tester',
  default: 'traiter',
};

const inputTypes = {
  json: 'donnÃ©es JSON',
  sql: 'requÃªte SQL',
  xml: 'donnÃ©es XML',
  yaml: 'donnÃ©es YAML',
  css: 'code CSS',
  js: 'code JavaScript',
  html: 'code HTML',
  csv: 'donnÃ©es CSV',
  base64: 'chaÃ®ne Base64',
  url: 'URL ou texte',
  jwt: 'jeton JWT',
  regex: 'expression rÃ©guliÃ¨re',
  markdown: 'texte Markdown',
  default: 'contenu',
};

const outputTypes = {
  json: 'JSON formatÃ©',
  sql: 'SQL formatÃ©',
  xml: 'XML formatÃ©',
  yaml: 'YAML formatÃ©',
  css: 'CSS formatÃ©',
  js: 'JavaScript formatÃ©',
  default: 'rÃ©sultat traitÃ©',
};

function getActionVerb(toolId) {
  if (toolId.includes('formatter')) return actionVerbs.formatter;
  if (toolId.includes('minifier')) return actionVerbs.minifier;
  if (toolId.includes('validator')) return actionVerbs.validator;
  if (toolId.includes('generator')) return actionVerbs.generator;
  if (toolId.includes('converter')) return actionVerbs.converter;
  if (toolId.includes('encode')) return actionVerbs.encode;
  if (toolId.includes('decode')) return actionVerbs.decode;
  if (toolId.includes('tester')) return actionVerbs.tester;
  return actionVerbs.default;
}

function getInputType(toolId) {
  for (const [key, value] of Object.entries(inputTypes)) {
    if (toolId.includes(key) && key !== 'default') return value;
  }
  return inputTypes.default;
}

function getOutputType(toolId) {
  for (const [key, value] of Object.entries(outputTypes)) {
    if (toolId.includes(key) && key !== 'default') return value;
  }
  return outputTypes.default;
}

function generateInstructions(toolId, toolTitle) {
  const template = JSON.parse(JSON.stringify(frenchInstructionsTemplate));

  template.title = template.title.replace('{TOOL_NAME}', toolTitle);

  const inputType = getInputType(toolId);
  const actionVerb = getActionVerb(toolId);
  const outputType = getOutputType(toolId);

  template.steps[0].title = template.steps[0].title.replace(
    '{INPUT_TYPE}',
    inputType
  );
  template.steps[0].description = template.steps[0].description.replace(
    '{INPUT_TYPE}',
    inputType
  );
  template.steps[2].description = template.steps[2].description.replace(
    '{ACTION_VERB}',
    actionVerb
  );
  template.steps[3].description = template.steps[3].description.replace(
    '{OUTPUT_TYPE}',
    outputType
  );

  return template;
}

// Process remaining files (skip already translated ones)
const skipFiles = [
  'api-tester.json',
  'json-formatter.json',
  'sql-formatter.json',
];
const toolsDir = './lib/i18n/dictionaries/fr/tools';
const files = fs
  .readdirSync(toolsDir)
  .filter((f) => f.endsWith('.json') && !skipFiles.includes(f));

let updated = 0;

console.log('\nðŸ“¦ FR: Translating remaining files\n');

files.forEach((file) => {
  const filePath = path.join(toolsDir, file);
  const toolId = file.replace('.json', '');
  const toolData = JSON.parse(fs.readFileSync(filePath, 'utf8'));

  const hasEnglishInstructions =
    toolData.instructions &&
    typeof toolData.instructions === 'object' &&
    toolData.instructions.title &&
    toolData.instructions.title.includes('How to use');

  if (hasEnglishInstructions) {
    toolData.instructions = generateInstructions(toolId, toolData.title);
    fs.writeFileSync(filePath, JSON.stringify(toolData, null, 2));
    console.log(`  âœ“ ${toolId}`);
    updated++;
  }
});

console.log(`\nâœ… FR: ${updated} files translated`);
